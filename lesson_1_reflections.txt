How did viewing a diff between two versions of a file help you see the bug that was introduced?

When one version works you can look what is wrong in the other file.
Then you can revert to the working version or
correct the mistake with the input you got.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

You can look how the file evolved and was was added at which time and with
good commands you can know also why you changed that. Also reverting to a version where a bug does not existed is nice.
Probably the bug was carried through multiple versions and was detected later.

What do you think are the pros and cons of manually choosing when to create a commit,
like you do in Git, vs having versions automatically saved, like Google Docs does?

You can choose when to commit, so on also you know what you done in this step.
When every commit is logical divided it's easier to mind the relevant differences.

Why do you think some version control systems, like Git, allow saving multiple files in one commit,
while others, like Google Docs, treat each file separately?

In Google Docs each document normally is independent to each other.
Which means they have no relation to each other, but in coding you have much
different situation. One file can rely on a function in another.
Which means that a change in this function can also affect the file where this function is called.

How can you use the commands git log and git diff to view the history of files?

With git log you can view the commit history with the commit id, time, author and commit message.
With git diff you can view the difference between 2 files and see what was added and was removed.

How might using version control make you more confident to make changes that could break something?

I can easily revert to the working version when I broke something. 
